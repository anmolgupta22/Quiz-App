// Generated by Dagger (https://dagger.dev).
package com.example.quizapp.di;

import android.app.Application;
import com.example.quizapp.database.DBHelper;
import com.example.quizapp.database.RoomRepository;
import com.example.quizapp.database.dao.QuizDao;
import com.example.quizapp.ui.QuizFragment;
import com.example.quizapp.ui.QuizFragment_MembersInjector;
import com.example.quizapp.ui.SelectCategoriesFragment;
import com.example.quizapp.ui.SelectCategoriesFragment_MembersInjector;
import com.example.quizapp.ui.StudentDetailsFragment;
import com.example.quizapp.ui.StudentDetailsFragment_MembersInjector;
import com.example.quizapp.viewModel.QuizViewModel;
import com.example.quizapp.viewModel.QuizViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerAppComponent {
  private DaggerAppComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApiModule apiModule;

    private RepositoryModule repositoryModule;

    private DatabaseModule databaseModule;

    private Builder() {
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }

    public Builder repositoryModule(RepositoryModule repositoryModule) {
      this.repositoryModule = Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(apiModule, ApiModule.class);
      if (repositoryModule == null) {
        this.repositoryModule = new RepositoryModule();
      }
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      return new AppComponentImpl(apiModule, repositoryModule, databaseModule);
    }
  }

  private static final class AppComponentImpl implements AppComponent {
    private final RepositoryModule repositoryModule;

    private final ApiModule apiModule;

    private final AppComponentImpl appComponentImpl = this;

    private Provider<Application> provideApplicationProvider;

    private Provider<DBHelper> providesDatabaseProvider;

    private Provider<QuizDao> providesQuizDaoProvider;

    private AppComponentImpl(ApiModule apiModuleParam, RepositoryModule repositoryModuleParam,
        DatabaseModule databaseModuleParam) {
      this.repositoryModule = repositoryModuleParam;
      this.apiModule = apiModuleParam;
      initialize(apiModuleParam, repositoryModuleParam, databaseModuleParam);

    }

    private Retrofit retrofit() {
      return ApiModule_ProvideRetrofitFactory.provideRetrofit(apiModule, ApiModule_ProvideGsonFactory.provideGson(apiModule), ApiModule_ProvideOkHttpClientFactory.provideOkHttpClient(apiModule));
    }

    private ApiService apiService() {
      return ApiModule_ProvideApiServiceFactory.provideApiService(apiModule, retrofit());
    }

    private QuizRepository quizRepository() {
      return RepositoryModule_ProvideQuizRepositoryFactory.provideQuizRepository(repositoryModule, apiService());
    }

    private RoomRepository roomRepository() {
      return new RoomRepository(providesQuizDaoProvider.get());
    }

    private QuizViewModel quizViewModel() {
      return RepositoryModule_ProvideMyViewModelFactory.provideMyViewModel(repositoryModule, quizRepository(), roomRepository());
    }

    private QuizViewModelFactory quizViewModelFactory() {
      return new QuizViewModelFactory(quizRepository(), roomRepository());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApiModule apiModuleParam,
        final RepositoryModule repositoryModuleParam, final DatabaseModule databaseModuleParam) {
      this.provideApplicationProvider = DoubleCheck.provider(ApiModule_ProvideApplicationFactory.create(apiModuleParam));
      this.providesDatabaseProvider = DoubleCheck.provider(DatabaseModule_ProvidesDatabaseFactory.create(databaseModuleParam, provideApplicationProvider));
      this.providesQuizDaoProvider = DoubleCheck.provider(DatabaseModule_ProvidesQuizDaoFactory.create(databaseModuleParam, providesDatabaseProvider));
    }

    @Override
    public void inject(StudentDetailsFragment fragment) {
      injectStudentDetailsFragment(fragment);
    }

    @Override
    public void inject(SelectCategoriesFragment fragment) {
      injectSelectCategoriesFragment(fragment);
    }

    @Override
    public void inject(QuizFragment fragment) {
      injectQuizFragment(fragment);
    }

    private StudentDetailsFragment injectStudentDetailsFragment(StudentDetailsFragment instance) {
      StudentDetailsFragment_MembersInjector.injectViewModel(instance, quizViewModel());
      StudentDetailsFragment_MembersInjector.injectQuizViewModelFactory(instance, quizViewModelFactory());
      return instance;
    }

    private SelectCategoriesFragment injectSelectCategoriesFragment(
        SelectCategoriesFragment instance) {
      SelectCategoriesFragment_MembersInjector.injectViewModel(instance, quizViewModel());
      SelectCategoriesFragment_MembersInjector.injectQuizViewModelFactory(instance, quizViewModelFactory());
      return instance;
    }

    private QuizFragment injectQuizFragment(QuizFragment instance) {
      QuizFragment_MembersInjector.injectViewModel(instance, quizViewModel());
      QuizFragment_MembersInjector.injectQuizViewModelFactory(instance, quizViewModelFactory());
      return instance;
    }
  }
}
